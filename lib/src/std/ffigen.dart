// ignore_for_file: non_positive_array_dimension, unused_field, type=lint

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Standard C Library
class StdLibC {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  StdLibC(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  StdLibC.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int close(
    int __fd,
  ) {
    return _close(
      __fd,
    );
  }

  late final _closePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('close');
  late final _close = _closePtr.asFunction<int Function(int)>();

  void closelog() {
    return _closelog();
  }

  late final _closelogPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('closelog');
  late final _closelog = _closelogPtr.asFunction<void Function()>();

  int dup(
    int __fd,
  ) {
    return _dup(
      __fd,
    );
  }

  late final _dupPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('dup');
  late final _dup = _dupPtr.asFunction<int Function(int)>();

  int dup2(
    int __fd,
    int __fd2,
  ) {
    return _dup2(
      __fd,
      __fd2,
    );
  }

  late final _dup2Ptr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>('dup2');
  late final _dup2 = _dup2Ptr.asFunction<int Function(int, int)>();

  void endfsent() {
    return _endfsent();
  }

  late final _endfsentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('endfsent');
  late final _endfsent = _endfsentPtr.asFunction<void Function()>();

  void endutxent() {
    return _endutxent();
  }

  late final _endutxentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('endutxent');
  late final _endutxent = _endutxentPtr.asFunction<void Function()>();

  int execv(
    ffi.Pointer<ffi.Char> __path,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __argv,
  ) {
    return _execv(
      __path,
      __argv,
    );
  }

  late final _execvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('execv');
  late final _execv = _execvPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int execve(
    ffi.Pointer<ffi.Char> __path,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __argv,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __envp,
  ) {
    return _execve(
      __path,
      __argv,
      __envp,
    );
  }

  late final _execvePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('execve');
  late final _execve = _execvePtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int execvp(
    ffi.Pointer<ffi.Char> __file,
    ffi.Pointer<ffi.Pointer<ffi.Char>> __argv,
  ) {
    return _execvp(
      __file,
      __argv,
    );
  }

  late final _execvpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('execvp');
  late final _execvp = _execvpPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int fcntl(
    int __fd,
    int __cmd,
  ) {
    return _fcntl(
      __fd,
      __cmd,
    );
  }

  late final _fcntlPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>('fcntl');
  late final _fcntl = _fcntlPtr.asFunction<int Function(int, int)>();

  int fnmatch(
    ffi.Pointer<ffi.Char> __pattern,
    ffi.Pointer<ffi.Char> __name,
    int __flags,
  ) {
    return _fnmatch(
      __pattern,
      __name,
      __flags,
    );
  }

  late final _fnmatchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('fnmatch');
  late final _fnmatch = _fnmatchPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int fork() {
    return _fork();
  }

  late final _forkPtr = _lookup<ffi.NativeFunction<ffi.Int Function()>>('fork');
  late final _fork = _forkPtr.asFunction<int Function()>();

  int fsync(
    int __fd,
  ) {
    return _fsync(
      __fd,
    );
  }

  late final _fsyncPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('fsync');
  late final _fsync = _fsyncPtr.asFunction<int Function(int)>();

  int getegid() {
    return _getegid();
  }

  late final _getegidPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function()>>('getegid');
  late final _getegid = _getegidPtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> getenv(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _getenv(
      __name,
    );
  }

  late final _getenvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('getenv');
  late final _getenv = _getenvPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int geteuid() {
    return _geteuid();
  }

  late final _geteuidPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function()>>('geteuid');
  late final _geteuid = _geteuidPtr.asFunction<int Function()>();

  ffi.Pointer<fstab_t> getfsent() {
    return _getfsent();
  }

  late final _getfsentPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<fstab_t> Function()>>('getfsent');
  late final _getfsent =
      _getfsentPtr.asFunction<ffi.Pointer<fstab_t> Function()>();

  ffi.Pointer<fstab_t> getfsfile(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _getfsfile(
      __name,
    );
  }

  late final _getfsfilePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<fstab_t> Function(ffi.Pointer<ffi.Char>)>>('getfsfile');
  late final _getfsfile = _getfsfilePtr
      .asFunction<ffi.Pointer<fstab_t> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<fstab_t> getfsspec(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _getfsspec(
      __name,
    );
  }

  late final _getfsspecPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<fstab_t> Function(ffi.Pointer<ffi.Char>)>>('getfsspec');
  late final _getfsspec = _getfsspecPtr
      .asFunction<ffi.Pointer<fstab_t> Function(ffi.Pointer<ffi.Char>)>();

  int getgid() {
    return _getgid();
  }

  late final _getgidPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function()>>('getgid');
  late final _getgid = _getgidPtr.asFunction<int Function()>();

  int gethostid() {
    return _gethostid();
  }

  late final _gethostidPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function()>>('gethostid');
  late final _gethostid = _gethostidPtr.asFunction<int Function()>();

  int getpgid(
    int __pid,
  ) {
    return _getpgid(
      __pid,
    );
  }

  late final _getpgidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('getpgid');
  late final _getpgid = _getpgidPtr.asFunction<int Function(int)>();

  int getpid() {
    return _getpid();
  }

  late final _getpidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getpid');
  late final _getpid = _getpidPtr.asFunction<int Function()>();

  int getppid() {
    return _getppid();
  }

  late final _getppidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getppid');
  late final _getppid = _getppidPtr.asFunction<int Function()>();

  ffi.Pointer<passwd_t> getpwnam(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _getpwnam(
      __name,
    );
  }

  late final _getpwnamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<passwd_t> Function(ffi.Pointer<ffi.Char>)>>('getpwnam');
  late final _getpwnam = _getpwnamPtr
      .asFunction<ffi.Pointer<passwd_t> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<passwd_t> getpwuid(
    int __uid,
  ) {
    return _getpwuid(
      __uid,
    );
  }

  late final _getpwuidPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<passwd_t> Function(ffi.UnsignedInt)>>(
      'getpwuid');
  late final _getpwuid =
      _getpwuidPtr.asFunction<ffi.Pointer<passwd_t> Function(int)>();

  int getsid(
    int __pid,
  ) {
    return _getsid(
      __pid,
    );
  }

  late final _getsidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('getsid');
  late final _getsid = _getsidPtr.asFunction<int Function(int)>();

  int getuid() {
    return _getuid();
  }

  late final _getuidPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function()>>('getuid');
  late final _getuid = _getuidPtr.asFunction<int Function()>();

  ffi.Pointer<utmpx_t> getutxent() {
    return _getutxent();
  }

  late final _getutxentPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<utmpx_t> Function()>>('getutxent');
  late final _getutxent =
      _getutxentPtr.asFunction<ffi.Pointer<utmpx_t> Function()>();

  ffi.Pointer<utmpx_t> getutxid(
    ffi.Pointer<utmpx_t> __id,
  ) {
    return _getutxid(
      __id,
    );
  }

  late final _getutxidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<utmpx_t> Function(ffi.Pointer<utmpx_t>)>>('getutxid');
  late final _getutxid = _getutxidPtr
      .asFunction<ffi.Pointer<utmpx_t> Function(ffi.Pointer<utmpx_t>)>();

  int ioctl(
    int __fd,
    int __request,
  ) {
    return _ioctl(
      __fd,
      __request,
    );
  }

  late final _ioctlPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.UnsignedLong)>>(
          'ioctl');
  late final _ioctl = _ioctlPtr.asFunction<int Function(int, int)>();

  int mkdir(
    ffi.Pointer<ffi.Char> __path,
    int __mode,
  ) {
    return _mkdir(
      __path,
      __mode,
    );
  }

  late final _mkdirPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.UnsignedInt)>>('mkdir');
  late final _mkdir =
      _mkdirPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mkfifo(
    ffi.Pointer<ffi.Char> __path,
    int __mode,
  ) {
    return _mkfifo(
      __path,
      __mode,
    );
  }

  late final _mkfifoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.UnsignedInt)>>('mkfifo');
  late final _mkfifo =
      _mkfifoPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int mkfifoat(
    int __fd,
    ffi.Pointer<ffi.Char> __path,
    int __mode,
  ) {
    return _mkfifoat(
      __fd,
      __path,
      __mode,
    );
  }

  late final _mkfifoatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.UnsignedInt)>>('mkfifoat');
  late final _mkfifoat =
      _mkfifoatPtr.asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  int open(
    ffi.Pointer<ffi.Char> __file,
    int __oflag,
  ) {
    return _open(
      __file,
      __oflag,
    );
  }

  late final _openPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Int)>>(
      'open');
  late final _open =
      _openPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  void openlog(
    ffi.Pointer<ffi.Char> __ident,
    int __option,
    int __facility,
  ) {
    return _openlog(
      __ident,
      __option,
      __facility,
    );
  }

  late final _openlogPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Char>, ffi.Int, ffi.Int)>>('openlog');
  late final _openlog =
      _openlogPtr.asFunction<void Function(ffi.Pointer<ffi.Char>, int, int)>();

  int pipe(
    ffi.Pointer<ffi.Int> __pipedes,
  ) {
    return _pipe(
      __pipedes,
    );
  }

  late final _pipePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Int>)>>(
          'pipe');
  late final _pipe = _pipePtr.asFunction<int Function(ffi.Pointer<ffi.Int>)>();

  int poll(
    ffi.Pointer<pollfd_t> __fds,
    int __nfds,
    int __timeout,
  ) {
    return _poll(
      __fds,
      __nfds,
      __timeout,
    );
  }

  late final _pollPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pollfd_t>, ffi.UnsignedLong, ffi.Int)>>('poll');
  late final _poll =
      _pollPtr.asFunction<int Function(ffi.Pointer<pollfd_t>, int, int)>();

  int pread(
    int __fd,
    ffi.Pointer<ffi.Void> __buf,
    int __nbytes,
    int __offset,
  ) {
    return _pread(
      __fd,
      __buf,
      __nbytes,
      __offset,
    );
  }

  late final _preadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(
              ffi.Int, ffi.Pointer<ffi.Void>, ffi.Size, ffi.Long)>>('pread');
  late final _pread = _preadPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Void>, int, int)>();

  int putenv(
    ffi.Pointer<ffi.Char> __string,
  ) {
    return _putenv(
      __string,
    );
  }

  late final _putenvPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'putenv');
  late final _putenv =
      _putenvPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int pwrite(
    int __fd,
    ffi.Pointer<ffi.Void> __buf,
    int __n,
    int __offset,
  ) {
    return _pwrite(
      __fd,
      __buf,
      __n,
      __offset,
    );
  }

  late final _pwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(
              ffi.Int, ffi.Pointer<ffi.Void>, ffi.Size, ffi.Long)>>('pwrite');
  late final _pwrite = _pwritePtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Void>, int, int)>();

  int read(
    int __fd,
    ffi.Pointer<ffi.Void> __buf,
    int __nbytes,
  ) {
    return _read(
      __fd,
      __buf,
      __nbytes,
    );
  }

  late final _readPtr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Int, ffi.Pointer<ffi.Void>, ffi.Size)>>('read');
  late final _read =
      _readPtr.asFunction<int Function(int, ffi.Pointer<ffi.Void>, int)>();

  int rename(
    ffi.Pointer<ffi.Char> __old,
    ffi.Pointer<ffi.Char> __new,
  ) {
    return _rename(
      __old,
      __new,
    );
  }

  late final _renamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('rename');
  late final _rename = _renamePtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int renameat(
    int __oldfd,
    ffi.Pointer<ffi.Char> __old,
    int __newfd,
    ffi.Pointer<ffi.Char> __new,
  ) {
    return _renameat(
      __oldfd,
      __old,
      __newfd,
      __new,
    );
  }

  late final _renameatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('renameat');
  late final _renameat = _renameatPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int setegid(
    int __gid,
  ) {
    return _setegid(
      __gid,
    );
  }

  late final _setegidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.UnsignedInt)>>('setegid');
  late final _setegid = _setegidPtr.asFunction<int Function(int)>();

  int setenv(
    ffi.Pointer<ffi.Char> __name,
    ffi.Pointer<ffi.Char> __value,
    int __replace,
  ) {
    return _setenv(
      __name,
      __value,
      __replace,
    );
  }

  late final _setenvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int)>>('setenv');
  late final _setenv = _setenvPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int seteuid(
    int __uid,
  ) {
    return _seteuid(
      __uid,
    );
  }

  late final _seteuidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.UnsignedInt)>>('seteuid');
  late final _seteuid = _seteuidPtr.asFunction<int Function(int)>();

  int setfsent() {
    return _setfsent();
  }

  late final _setfsentPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('setfsent');
  late final _setfsent = _setfsentPtr.asFunction<int Function()>();

  int setgid(
    int __gid,
  ) {
    return _setgid(
      __gid,
    );
  }

  late final _setgidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.UnsignedInt)>>('setgid');
  late final _setgid = _setgidPtr.asFunction<int Function(int)>();

  int sethostid(
    int __id,
  ) {
    return _sethostid(
      __id,
    );
  }

  late final _sethostidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Long)>>('sethostid');
  late final _sethostid = _sethostidPtr.asFunction<int Function(int)>();

  int setlogmask(
    int __mask,
  ) {
    return _setlogmask(
      __mask,
    );
  }

  late final _setlogmaskPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('setlogmask');
  late final _setlogmask = _setlogmaskPtr.asFunction<int Function(int)>();

  int setpgid(
    int __pid,
    int __pgid,
  ) {
    return _setpgid(
      __pid,
      __pgid,
    );
  }

  late final _setpgidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Int)>>(
          'setpgid');
  late final _setpgid = _setpgidPtr.asFunction<int Function(int, int)>();

  int setregid(
    int __rgid,
    int __egid,
  ) {
    return _setregid(
      __rgid,
      __egid,
    );
  }

  late final _setregidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.UnsignedInt, ffi.UnsignedInt)>>('setregid');
  late final _setregid = _setregidPtr.asFunction<int Function(int, int)>();

  int setreuid(
    int __ruid,
    int __euid,
  ) {
    return _setreuid(
      __ruid,
      __euid,
    );
  }

  late final _setreuidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.UnsignedInt, ffi.UnsignedInt)>>('setreuid');
  late final _setreuid = _setreuidPtr.asFunction<int Function(int, int)>();

  int setsid() {
    return _setsid();
  }

  late final _setsidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('setsid');
  late final _setsid = _setsidPtr.asFunction<int Function()>();

  int setuid(
    int __uid,
  ) {
    return _setuid(
      __uid,
    );
  }

  late final _setuidPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.UnsignedInt)>>('setuid');
  late final _setuid = _setuidPtr.asFunction<int Function(int)>();

  void setutxent() {
    return _setutxent();
  }

  late final _setutxentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('setutxent');
  late final _setutxent = _setutxentPtr.asFunction<void Function()>();

  ffi.Pointer<ffi.Char> strerror(
    int __errnum,
  ) {
    return _strerror(
      __errnum,
    );
  }

  late final _strerrorPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'strerror');
  late final _strerror =
      _strerrorPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  void sync1() {
    return _sync1();
  }

  late final _sync1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('sync');
  late final _sync1 = _sync1Ptr.asFunction<void Function()>();

  void syslog(
    int __pri,
    ffi.Pointer<ffi.Char> __fmt,
  ) {
    return _syslog(
      __pri,
      __fmt,
    );
  }

  late final _syslogPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Char>)>>('syslog');
  late final _syslog =
      _syslogPtr.asFunction<void Function(int, ffi.Pointer<ffi.Char>)>();

  int unlink(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _unlink(
      __name,
    );
  }

  late final _unlinkPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'unlink');
  late final _unlink =
      _unlinkPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int unlinkat(
    int __fd,
    ffi.Pointer<ffi.Char> __name,
    int __flag,
  ) {
    return _unlinkat(
      __fd,
      __name,
      __flag,
    );
  }

  late final _unlinkatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('unlinkat');
  late final _unlinkat =
      _unlinkatPtr.asFunction<int Function(int, ffi.Pointer<ffi.Char>, int)>();

  int unsetenv(
    ffi.Pointer<ffi.Char> __name,
  ) {
    return _unsetenv(
      __name,
    );
  }

  late final _unsetenvPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'unsetenv');
  late final _unsetenv =
      _unsetenvPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int wordexp(
    ffi.Pointer<ffi.Char> __words,
    ffi.Pointer<wordexp_t> __pwordexp,
    int __flags,
  ) {
    return _wordexp(
      __words,
      __pwordexp,
      __flags,
    );
  }

  late final _wordexpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<wordexp_t>,
              ffi.Int)>>('wordexp');
  late final _wordexp = _wordexpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<wordexp_t>, int)>();

  void wordfree(
    ffi.Pointer<wordexp_t> __wordexp,
  ) {
    return _wordfree(
      __wordexp,
    );
  }

  late final _wordfreePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<wordexp_t>)>>(
          'wordfree');
  late final _wordfree =
      _wordfreePtr.asFunction<void Function(ffi.Pointer<wordexp_t>)>();

  int write(
    int __fd,
    ffi.Pointer<ffi.Void> __buf,
    int __n,
  ) {
    return _write(
      __fd,
      __buf,
      __n,
    );
  }

  late final _writePtr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(
              ffi.Int, ffi.Pointer<ffi.Void>, ffi.Size)>>('write');
  late final _write =
      _writePtr.asFunction<int Function(int, ffi.Pointer<ffi.Void>, int)>();

  late final addresses = _SymbolAddresses(this);
}

class _SymbolAddresses {
  final StdLibC _library;
  _SymbolAddresses(this._library);
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Int)>> get close =>
      _library._closePtr;
}

final class UnnamedStruct1 extends ffi.Struct {
  @ffi.Int()
  external int tv_sec;

  @ffi.Int()
  external int tv_usec;
}

final class __exit_status extends ffi.Struct {
  @ffi.Short()
  external int __e_termination;

  @ffi.Short()
  external int __e_exit;
}

final class fstab_t extends ffi.Struct {
  external ffi.Pointer<ffi.Char> fs_spec;

  external ffi.Pointer<ffi.Char> fs_file;

  external ffi.Pointer<ffi.Char> fs_vfstype;

  external ffi.Pointer<ffi.Char> fs_mntops;

  external ffi.Pointer<ffi.Char> fs_type;

  @ffi.Int()
  external int fs_freq;

  @ffi.Int()
  external int fs_passno;
}

final class passwd_t extends ffi.Struct {
  external ffi.Pointer<ffi.Char> pw_name;

  external ffi.Pointer<ffi.Char> pw_passwd;

  @ffi.UnsignedInt()
  external int pw_uid;

  @ffi.UnsignedInt()
  external int pw_gid;

  external ffi.Pointer<ffi.Char> pw_gecos;

  external ffi.Pointer<ffi.Char> pw_dir;

  external ffi.Pointer<ffi.Char> pw_shell;
}

final class pollfd_t extends ffi.Struct {
  @ffi.Int()
  external int fd;

  @ffi.Short()
  external int events;

  @ffi.Short()
  external int revents;
}

final class utmpx_t extends ffi.Struct {
  @ffi.Short()
  external int ut_type;

  @ffi.Int()
  external int ut_pid;

  @ffi.Array.multi([32])
  external ffi.Array<ffi.Char> ut_line;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Char> ut_id;

  @ffi.Array.multi([32])
  external ffi.Array<ffi.Char> ut_user;

  @ffi.Array.multi([256])
  external ffi.Array<ffi.Char> ut_host;

  external __exit_status ut_exit;

  @ffi.Int()
  external int ut_session;

  external UnnamedStruct1 ut_tv;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Int> ut_addr_v6;

  @ffi.Array.multi([20])
  external ffi.Array<ffi.Char> __glibc_reserved;
}

final class wordexp_t extends ffi.Struct {
  @ffi.Size()
  external int we_wordc;

  external ffi.Pointer<ffi.Pointer<ffi.Char>> we_wordv;

  @ffi.Size()
  external int we_offs;
}
